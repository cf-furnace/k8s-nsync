package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*TaskRequestFromCC task request from c c

swagger:model TaskRequestFromCC
*/
type TaskRequestFromCC struct {

	/* command
	 */
	Command string `json:"command,omitempty"`

	/* completion callback
	 */
	CompletionCallback string `json:"completion_callback,omitempty"`

	/* disk mb
	 */
	DiskMb int64 `json:"disk_mb,omitempty"`

	/* docker path
	 */
	DockerPath string `json:"docker_path,omitempty"`

	/* droplet uri
	 */
	DropletURI string `json:"droplet_uri,omitempty"`

	/* egress rules
	 */
	EgressRules []*SecurityGroupRule `json:"egress_rules,omitempty"`

	/* environment
	 */
	Environment []*VolumeMount `json:"environment,omitempty"`

	/* lifecycle
	 */
	Lifecycle string `json:"lifecycle,omitempty"`

	/* log guid
	 */
	LogGUID string `json:"log_guid,omitempty"`

	/* log source
	 */
	LogSource string `json:"log_source,omitempty"`

	/* memory mb
	 */
	MemoryMb int64 `json:"memory_mb,omitempty"`

	/* rootfs
	 */
	Rootfs string `json:"rootfs,omitempty"`

	/* task guid
	 */
	TaskGUID string `json:"task_guid,omitempty"`

	/* volume mounts
	 */
	VolumeMounts []*VolumeMount `json:"volume_mounts,omitempty"`
}

// Validate validates this task request from c c
func (m *TaskRequestFromCC) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEgressRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumeMounts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskRequestFromCC) validateEgressRules(formats strfmt.Registry) error {

	if swag.IsZero(m.EgressRules) { // not required
		return nil
	}

	for i := 0; i < len(m.EgressRules); i++ {

		if swag.IsZero(m.EgressRules[i]) { // not required
			continue
		}

		if m.EgressRules[i] != nil {

			if err := m.EgressRules[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *TaskRequestFromCC) validateEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	for i := 0; i < len(m.Environment); i++ {

		if swag.IsZero(m.Environment[i]) { // not required
			continue
		}

		if m.Environment[i] != nil {

			if err := m.Environment[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *TaskRequestFromCC) validateVolumeMounts(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeMounts) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeMounts); i++ {

		if swag.IsZero(m.VolumeMounts[i]) { // not required
			continue
		}

		if m.VolumeMounts[i] != nil {

			if err := m.VolumeMounts[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
