package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// KillIndexHandlerFunc turns a function with the right signature into a kill index handler
type KillIndexHandlerFunc func(KillIndexParams) middleware.Responder

// Handle executing the request and returning a response
func (fn KillIndexHandlerFunc) Handle(params KillIndexParams) middleware.Responder {
	return fn(params)
}

// KillIndexHandler interface for that can handle valid kill index params
type KillIndexHandler interface {
	Handle(KillIndexParams) middleware.Responder
}

// NewKillIndex creates a new http.Handler for the kill index operation
func NewKillIndex(ctx *middleware.Context, handler KillIndexHandler) *KillIndex {
	return &KillIndex{Context: ctx, Handler: handler}
}

/*KillIndex swagger:route DELETE /apps/{process_guid}/index/{index} killIndex

KillIndex kill index API

*/
type KillIndex struct {
	Context *middleware.Context
	Handler KillIndexHandler
}

func (o *KillIndex) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewKillIndexParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
