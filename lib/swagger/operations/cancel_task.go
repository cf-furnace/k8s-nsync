package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CancelTaskHandlerFunc turns a function with the right signature into a cancel task handler
type CancelTaskHandlerFunc func(CancelTaskParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CancelTaskHandlerFunc) Handle(params CancelTaskParams) middleware.Responder {
	return fn(params)
}

// CancelTaskHandler interface for that can handle valid cancel task params
type CancelTaskHandler interface {
	Handle(CancelTaskParams) middleware.Responder
}

// NewCancelTask creates a new http.Handler for the cancel task operation
func NewCancelTask(ctx *middleware.Context, handler CancelTaskHandler) *CancelTask {
	return &CancelTask{Context: ctx, Handler: handler}
}

/*CancelTask swagger:route DELETE /tasks/{task_guid} cancelTask

CancelTask cancel task API

*/
type CancelTask struct {
	Context *middleware.Context
	Handler CancelTaskHandler
}

func (o *CancelTask) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCancelTaskParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
