package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DesireTaskHandlerFunc turns a function with the right signature into a desire task handler
type DesireTaskHandlerFunc func(DesireTaskParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DesireTaskHandlerFunc) Handle(params DesireTaskParams) middleware.Responder {
	return fn(params)
}

// DesireTaskHandler interface for that can handle valid desire task params
type DesireTaskHandler interface {
	Handle(DesireTaskParams) middleware.Responder
}

// NewDesireTask creates a new http.Handler for the desire task operation
func NewDesireTask(ctx *middleware.Context, handler DesireTaskHandler) *DesireTask {
	return &DesireTask{Context: ctx, Handler: handler}
}

/*DesireTask swagger:route POST /tasks desireTask

DesireTask desire task API

*/
type DesireTask struct {
	Context *middleware.Context
	Handler DesireTaskHandler
}

func (o *DesireTask) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDesireTaskParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
